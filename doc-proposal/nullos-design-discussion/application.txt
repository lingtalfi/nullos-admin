Application
======================
2017-01-27




Une application est un système qui traite des requêtes.
Le traitement d'une requête peut produire n'importe quoi: une page web,
un fichier pdf, autre...

En général, une application web produit des pages web.


Si on assigne le traitement d'une requête à un objet qu'on appelle Controller,
alors on peut grouper les Controlllers par affinités.
Par exemple tous les Controllers dont le rôle est d'afficher une page web,
tous les Controllers dont le rôle est de générer un fichier pdf, etc...


L'avantage de grouper les Controllers par affinité et d'utiiser un objet
pour représenter le Controller est que l'on peut ensuite affecter
le comportement de tout un groupe de Controllers en utilisant le simple
principe d'héritage et en modifiant un Controller "mère".


On pourrait croire qu'une application peut retourner un résultat,
par exemple une application calculatrice, en ligne de commande, dont le but serait de retourner le
résultat d'un calcul.
Plus exactement, cette application afficherait un résultat.
Cela simplifie la conception d'une application en général:
une application ne retourne pas de résultat, mais simplement délègue une requête
à un Controller qui traite la requête.


La requête entre dans l'application, et est ensuite assignée à un Controller.
Le Controller, de son côté, reçoit simplement des paramètres à traiter,
et effectue son job en fonction de ces paramètres.

Mais quels sont ces paramètres ?
Qui les choisit ?
Et comment sont-ils assignés au Controller ?

C'est l'auteur d'un Controller qui choisit ses paramètres.
On peut en effet imaginer une application dans laquelle les Controllers
sont ajoutés dynamiquement/modulairement, chaque Controller ayant un auteur
potentiellement différent.


Partons du principe qu'il y a deux types d'application:

- application web
- application en ligne de commande

Une application hybride serait également possible.


Lorsqu'un auteur écrit un Controller, il connaît probablement le type d'application
dans laquelle le Controller sera utilisé.

L'application reçoit un objet Request, qui représente la requête formulée par
l'utilisateur.
Pour dispatcher cette Request vers un Controller, l'application utilisera
un ApplicationRequestDispatcher, dont le seul rôle sera de rediriger la requête
au bon Controller.

Cependant, c'est bien le Controller qui sait si la requête lui est adressée ou pas.
Précisons tout de suite qu'une requête ne peut être traitée que par un seul Controller
à la fois.

Chaque Controller doit donc, d'une certaine manière, indiquer à l'ApplicationRequestDispatcher
quel(les) requête(s) il souhaite traiter.








































